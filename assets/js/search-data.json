{
  
    
        "post0": {
            "title": "Music Analysis Project",
            "content": "import pandas as pd from sklearn.linear_model import LinearRegression import matplotlib.pyplot as plt . musicDF=pd.read_csv(&#39;music.csv&#39;) . print(&quot;Dimensions of the dataframe&quot;) musicDF.shape . Dimensions of the dataframe . (10000, 35) . print(&quot;First 5 rows: &quot;) musicDF.head() . First 5 rows: . artist.familiarity artist.hotttnesss artist.id artist.latitude artist.location artist.longitude artist.name artist.similar artist.terms artist.terms_freq ... song.mode song.mode_confidence song.start_of_fade_out song.tatums_confidence song.tatums_start song.tempo song.time_signature song.time_signature_confidence song.title song.year . 0 0.581794 | 0.401998 | ARD7TVE1187B99BFB1 | 0.00000 | 0 | 0.00000 | Casual | 0.0 | hip hop | 1.000000 | ... | 0 | 0.636 | 218.932 | 0.779 | 0.28519 | 92.198 | 4.0 | 0.778 | 0 | 0 | . 1 0.630630 | 0.417500 | ARMJAGH1187FB546F3 | 35.14968 | 0 | -90.04892 | The Box Tops | 0.0 | blue-eyed soul | 1.000000 | ... | 0 | 0.430 | 137.915 | 0.969 | 0.20627 | 121.274 | 4.0 | 0.384 | 0 | 1969 | . 2 0.487357 | 0.343428 | ARKRRTF1187B9984DA | 0.00000 | 0 | 0.00000 | Sonora Santanera | 0.0 | salsa | 1.000000 | ... | 1 | 0.565 | 172.304 | 0.482 | 0.42132 | 100.070 | 1.0 | 0.000 | 0 | 0 | . 3 0.630382 | 0.454231 | AR7G5I41187FB4CE6C | 0.00000 | 0 | 0.00000 | Adam Ant | 0.0 | pop rock | 0.988584 | ... | 1 | 0.749 | 217.124 | 0.601 | 0.56254 | 119.293 | 4.0 | 0.000 | 0 | 1982 | . 4 0.651046 | 0.401724 | ARXR32B1187FB57099 | 0.00000 | 0 | 0.00000 | Gob | 0.0 | pop punk | 0.887288 | ... | 1 | 0.371 | 198.699 | 1.000 | 0.13576 | 129.738 | 4.0 | 0.562 | 0 | 2007 | . 5 rows × 35 columns . print(&quot;Last 5 rows: &quot;) musicDF.tail() . Last 5 rows: . artist.familiarity artist.hotttnesss artist.id artist.latitude artist.location artist.longitude artist.name artist.similar artist.terms artist.terms_freq ... song.mode song.mode_confidence song.start_of_fade_out song.tatums_confidence song.tatums_start song.tempo song.time_signature song.time_signature_confidence song.title song.year . 9995 0.722571 | 0.499826 | AR4C6V01187FB3BAF4 | 39.55792 | 0 | -7.84481 | Moonspell | 0.0 | sympho black metal | 0.999765 | ... | 1 | 0.540 | 386.194 | 0.224 | 0.22262 | 140.185 | 4.0 | 0.099 | 0 | 1998 | . 9996 0.511663 | 0.409779 | AR9JLBU1187B9AAEC4 | -33.96243 | 0 | 25.62326 | Danny Williams | 0.0 | ballad | 0.915417 | ... | 1 | 0.398 | 163.463 | 0.604 | 0.07692 | 77.072 | 3.0 | 0.597 | 0 | 1998 | . 9997 0.433508 | 0.289903 | ARS1DCR1187B9A4A56 | 0.00000 | 0 | 0.00000 | Winston Reedy | 0.0 | lovers rock | 0.960115 | ... | 1 | 0.565 | 186.015 | 1.000 | 0.27924 | 118.123 | 4.0 | 0.205 | 0 | 0 | . 9998 0.334457 | 0.216829 | ARAGMIV11F4C843F78 | 0.00000 | 0 | 0.00000 | Myrick &quot;Freeze&quot; Guillory | 0.0 | zydeco | 1.000000 | ... | 1 | 0.503 | 300.826 | 0.421 | 0.28192 | 137.663 | 4.0 | 0.000 | 0 | 0 | . 9999 0.609182 | 0.509243 | ARYXOV81187B99831D | 0.00000 | 0 | 0.00000 | Seventh Day Slumber | 0.0 | christian rock | 0.926220 | ... | 0 | 0.406 | 193.167 | 0.710 | 0.20535 | 150.575 | 4.0 | 0.317 | 0 | 2005 | . 5 rows × 35 columns . print(&quot;Column names&quot;) musicDF.columns . Column names . Index([&#39;artist.familiarity&#39;, &#39;artist.hotttnesss&#39;, &#39;artist.id&#39;, &#39;artist.latitude&#39;, &#39;artist.location&#39;, &#39;artist.longitude&#39;, &#39;artist.name&#39;, &#39;artist.similar&#39;, &#39;artist.terms&#39;, &#39;artist.terms_freq&#39;, &#39;release.id&#39;, &#39;release.name&#39;, &#39;song.artist_mbtags&#39;, &#39;song.artist_mbtags_count&#39;, &#39;song.bars_confidence&#39;, &#39;song.bars_start&#39;, &#39;song.beats_confidence&#39;, &#39;song.beats_start&#39;, &#39;song.duration&#39;, &#39;song.end_of_fade_in&#39;, &#39;song.hotttnesss&#39;, &#39;song.id&#39;, &#39;song.key&#39;, &#39;song.key_confidence&#39;, &#39;song.loudness&#39;, &#39;song.mode&#39;, &#39;song.mode_confidence&#39;, &#39;song.start_of_fade_out&#39;, &#39;song.tatums_confidence&#39;, &#39;song.tatums_start&#39;, &#39;song.tempo&#39;, &#39;song.time_signature&#39;, &#39;song.time_signature_confidence&#39;, &#39;song.title&#39;, &#39;song.year&#39;], dtype=&#39;object&#39;) . musicDF.describe() . artist.familiarity artist.hotttnesss artist.latitude artist.location artist.longitude artist.similar artist.terms_freq release.id release.name song.artist_mbtags ... song.mode song.mode_confidence song.start_of_fade_out song.tatums_confidence song.tatums_start song.tempo song.time_signature song.time_signature_confidence song.title song.year . count 10000.000000 | 10000.000000 | 10000.000000 | 10000.000 | 10000.000000 | 10000.0 | 1.000000e+04 | 10000.000000 | 10000.000000 | 10000.000000 | ... | 10000.000000 | 10000.000000 | 10000.000000 | 10000.000000 | 10000.000000 | 10000.000000 | 10000.000000 | 10000.000000 | 10000.000000 | 10000.000000 | . mean 0.565230 | 0.385552 | 13.904283 | 0.078 | -23.923863 | 0.0 | 2.248903e+02 | 371024.058400 | 23.096000 | 0.000033 | ... | 0.691000 | 0.477765 | 229.883436 | 0.507875 | 0.299886 | 122.900913 | 3.564443 | 0.599785 | 10.011400 | 934.704600 | . std 0.160528 | 0.143647 | 20.356379 | 7.800 | 43.723359 | 0.0 | 2.239216e+04 | 236777.828209 | 1322.901526 | 0.003330 | ... | 0.462104 | 0.191269 | 112.024303 | 0.332357 | 0.510925 | 35.204746 | 1.266620 | 8.991567 | 945.486852 | 996.650657 | . min 0.000000 | 0.000000 | -41.280540 | 0.000 | -162.436500 | 0.0 | 0.000000e+00 | 0.000000 | 0.000000 | 0.000000 | ... | 0.000000 | 0.000000 | -21.394000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 25% 0.467570 | 0.325266 | 0.000000 | 0.000 | -73.948880 | 0.0 | 9.476125e-01 | 172858.000000 | 0.000000 | 0.000000 | ... | 0.000000 | 0.360000 | 168.855750 | 0.237000 | 0.110692 | 96.959500 | 3.000000 | 0.097750 | 0.000000 | 0.000000 | . 50% 0.563584 | 0.380742 | 0.000000 | 0.000 | 0.000000 | 0.0 | 9.999728e-01 | 333103.000000 | 0.000000 | 0.000000 | ... | 1.000000 | 0.487000 | 213.864500 | 0.500000 | 0.191520 | 120.156500 | 4.000000 | 0.551000 | 0.000000 | 0.000000 | . 75% 0.668020 | 0.453858 | 34.419250 | 0.000 | 0.000000 | 0.0 | 1.000000e+00 | 573532.500000 | 0.000000 | 0.000000 | ... | 1.000000 | 0.606000 | 266.274750 | 0.774250 | 0.294743 | 144.006750 | 4.000000 | 0.864000 | 0.000000 | 2000.000000 | . max 1.000000 | 1.082503 | 69.651020 | 780.000 | 174.767140 | 0.0 | 2.239217e+06 | 823599.000000 | 85555.000000 | 0.333000 | ... | 1.000000 | 1.000000 | 1813.426000 | 9.227560 | 12.245830 | 262.828000 | 7.000000 | 898.891000 | 94496.000000 | 2010.000000 | . 8 rows × 31 columns . musicDF.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 10000 entries, 0 to 9999 Data columns (total 35 columns): # Column Non-Null Count Dtype -- -- 0 artist.familiarity 10000 non-null float64 1 artist.hotttnesss 10000 non-null float64 2 artist.id 10000 non-null object 3 artist.latitude 10000 non-null float64 4 artist.location 10000 non-null int64 5 artist.longitude 10000 non-null float64 6 artist.name 10000 non-null object 7 artist.similar 10000 non-null float64 8 artist.terms 9995 non-null object 9 artist.terms_freq 10000 non-null float64 10 release.id 10000 non-null int64 11 release.name 10000 non-null int64 12 song.artist_mbtags 10000 non-null float64 13 song.artist_mbtags_count 10000 non-null float64 14 song.bars_confidence 10000 non-null float64 15 song.bars_start 10000 non-null float64 16 song.beats_confidence 10000 non-null float64 17 song.beats_start 10000 non-null float64 18 song.duration 10000 non-null float64 19 song.end_of_fade_in 10000 non-null float64 20 song.hotttnesss 10000 non-null float64 21 song.id 10000 non-null object 22 song.key 10000 non-null float64 23 song.key_confidence 10000 non-null float64 24 song.loudness 10000 non-null float64 25 song.mode 10000 non-null int64 26 song.mode_confidence 10000 non-null float64 27 song.start_of_fade_out 10000 non-null float64 28 song.tatums_confidence 10000 non-null float64 29 song.tatums_start 10000 non-null float64 30 song.tempo 10000 non-null float64 31 song.time_signature 10000 non-null float64 32 song.time_signature_confidence 10000 non-null float64 33 song.title 10000 non-null int64 34 song.year 10000 non-null int64 dtypes: float64(25), int64(6), object(4) memory usage: 2.7+ MB . musicDF.plot(kind=&#39;scatter&#39;,x=&#39;song.loudness&#39;,y=&#39;song.hotttnesss&#39;); # This scatter has a very undtraditional shape but we think it is important to notice that there seems to be some # slight hinting towards higher values of song.loudness associated with popularity. As you can see there are songs # that have the same loudness as others but are not nearly as popular so loudness isn&#39;t the only characteristic # we can base our analysis off of but for the most part, the more popular songs tend to have a loudness rating # from [-10,0] . musicDF[&#39;song.hotttnesss&#39;].plot(kind=&#39;box&#39;) #In this box plot, it appears that the median measurement of song popularity lies at 0, #and the minimum lies at the first quartile, -1. The third quartile is seen at about 0.35, #and the maximum is 1. It seems as though the first quartile has a larger range than the third quartile. #Outliers are expected to be seen in the first quartile range and also at the maximum. . &lt;AxesSubplot:&gt; . from sklearn.linear_model import LinearRegression import matplotlib.pyplot as plt X = musicDF[[&#39;artist.hotttnesss&#39;]] y = musicDF[&#39;song.tempo&#39;] reg = LinearRegression().fit(X, y) ytrain = reg.intercept_ + reg.coef_ * X plt.plot(X,y,&#39;ro&#39;,X,ytrain,&#39;b-&#39;) plt.title(&quot;Linear Regression of song tempo in comparison to artist hotttness rating&quot;) # We ran a linear regression comparing the correlation between artist hotttnesss and the tempo of a song. # Depicted below we see that the fitting line almost has a slope of 0 and we can see that the surrounding # points don&#39;t really trend to have y=x or y=-x shape making it difficult to make the conclusion that # a songs tempo influences the artist hotttness rating that much. Almost resembling a constant y=C shape # makes us think that we have to do some sort of analysis with a combination of different song characteristics # to find a more convincing correlation. . Text(0.5, 1.0, &#39;Linear Regression of song tempo in comparison to artist hotttness rating&#39;) . tempoDF = musicDF.sort_values(by=&#39;song.tempo&#39;, ascending=False).reset_index() barData = tempoDF.loc[0:50,[&#39;song.tempo&#39;,&#39;artist.name&#39;]] barData.plot(kind=&#39;bar&#39;, x=&#39;artist.name&#39;, y=&#39;song.tempo&#39;, figsize=(12,5), ylabel=&quot;song tempo&quot;, title=&quot;song tempo vs. arist name&quot;) # We first sorted the songs by tempo (a little over 250 seems to be the fastest song that this dataset has). # Then we made a bar plot showing the artist&#39;s name assoicated with the fastest song. This information should be # used in combination with the rest of the data as we have artists with the fastest songs and we want to see # if maybe there is some correlation between the speed of a song and the overall popularity ranking. For additional # analysis we will run tests on the artists themselves to see if they are popular. . &lt;AxesSubplot:title={&#39;center&#39;:&#39;song tempo vs. arist name&#39;}, xlabel=&#39;artist.name&#39;, ylabel=&#39;song tempo&#39;&gt; . musicDF.plot(kind=&#39;scatter&#39;, x=&#39;song.hotttnesss&#39;, y=&#39;song.duration&#39;, color=&#39;skyblue&#39;) . &lt;AxesSubplot:xlabel=&#39;song.hotttnesss&#39;, ylabel=&#39;song.duration&#39;&gt; . musicDF[&#39;song.hotttnesss&#39;] music_df_song_h= musicDF[musicDF[&#39;song.hotttnesss&#39;] &gt; 0.0] . music_df_song_h.plot(kind=&#39;scatter&#39;, x=&#39;song.hotttnesss&#39;, y=&#39;song.duration&#39;, color=&#39;deepskyblue&#39;) . &lt;AxesSubplot:xlabel=&#39;song.hotttnesss&#39;, ylabel=&#39;song.duration&#39;&gt; . musicDF[&#39;artist.hotttnesss&#39;] . 0 0.401998 1 0.417500 2 0.343428 3 0.454231 4 0.401724 ... 9995 0.499826 9996 0.409779 9997 0.289903 9998 0.216829 9999 0.509243 Name: artist.hotttnesss, Length: 10000, dtype: float64 . music_df_song_h.plot(kind=&#39;scatter&#39;, x=&#39;artist.hotttnesss&#39;, y=&#39;song.duration&#39;, color=&#39;teal&#39;) . &lt;AxesSubplot:xlabel=&#39;artist.hotttnesss&#39;, ylabel=&#39;song.duration&#39;&gt; . import pandas as pd from shapely.geometry import Point import geopandas as gpd from geopandas import GeoDataFrame . def filterLatLong(d): latLongDF = d[d[&#39;artist.latitude&#39;] != 0.0] latLongDF = latLongDF[latLongDF[&#39;artist.longitude&#39;] != 0.0] return latLongDF.reset_index() music_df = filterLatLong(musicDF) song_df = music_df.sort_values(&#39;song.hotttnesss&#39;, axis=0, ascending=False, inplace=False).reset_index(drop=True) artist_df = music_df.sort_values(&#39;artist.hotttnesss&#39;, axis=0, ascending=False, inplace=False).reset_index(drop=True) # top 10% top10PercentSong = song_df.head(int(len(song_df) * .1)) restSong = song_df.tail(int(len(song_df)*.5)) print(top10PercentSong[&#39;artist.latitude&#39;]) top10PercentArtist = artist_df.head(int(len(song_df) * .1)) restArtist = artist_df.tail(int(len(song_df)*.5)) def createMap(df): geometry = [Point(xy) for xy in zip(df[&#39;artist.longitude&#39;], df[&#39;artist.latitude&#39;])] gdf = GeoDataFrame(df, geometry=geometry) world = gpd.read_file(gpd.datasets.get_path(&#39;naturalearth_lowres&#39;)) gdf.plot(ax=world.plot(figsize=(10, 6)), marker=&#39;o&#39;, color=&#39;red&#39;, markersize=5) createMap(top10PercentSong) createMap(restSong) createMap(top10PercentArtist) createMap(restArtist) . 0 38.89910 1 41.88415 2 49.26044 3 42.33168 4 54.31407 ... 369 39.37413 370 43.64856 371 29.78772 372 37.16793 373 35.22250 Name: artist.latitude, Length: 374, dtype: float64 . from geopy.geocoders import Nominatim geolocator = Nominatim(user_agent=&quot;geoapiExercises&quot;) . def getLocationFromCoordinates(lat,long): #takes in lat and long as a float =&gt; converts to string location = geolocator.reverse(str(lat) + &#39;,&#39; + str(long)) return location def getStateCountryName(): dFreq={} for k,v in top10PercentSong.iterrows(): location = getLocationFromCoordinates(v[&#39;artist.latitude&#39;],v[&#39;artist.longitude&#39;]) if location != None: splitLocation = location[0].split(&#39;,&#39;) stateCountryInd = len(splitLocation)-3 dFreq[splitLocation[stateCountryInd]] = dFreq[splitLocation[stateCountryInd]] + 1 if splitLocation[stateCountryInd] in dFreq else 1 return dFreq print(getStateCountryName()) #{&#39; District of Columbia&#39;: 1, &#39; Illinois&#39;: 12, &#39; British Columbia&#39;: 4, &#39; Michigan&#39;: 8, &#39; England&#39;: 48, &#39; North Carolina&#39;: 4, &#39; Ontario&#39;: 7, &#39; Surrey County&#39;: 1, &#39; Tennessee&#39;: 8, &#39; New York&#39;: 43, &#39; California&#39;: 72, &#39; France métropolitaine&#39;: 5, &#39; Massachusetts&#39;: 5, &#39; Colorado&#39;: 2, &#39; Alabama&#39;: 7, &#39; Arkansas&#39;: 1, &#39; Skåne län&#39;: 3, &#39; Minnesota&#39;: 3, &#39; Puerto Rico&#39;: 2, &#39; Georgia&#39;: 7, &#39;Montgomery County&#39;: 6, &#39; Pennsylvania&#39;: 4, &#39; Victoria&#39;: 3, &#39; Washington&#39;: 6, &#39; Nova Scotia&#39;: 2, &#39; New Jersey&#39;: 8, &#39; Connecticut&#39;: 4, &#39; Florida&#39;: 8, &#39; Woodlands County&#39;: 1, &#39; Iowa&#39;: 2, &#39; Bahia&#39;: 1, &#39; Sundsvalls kommun&#39;: 4, &#39; Texas&#39;: 12, &#39; Wisconsin&#39;: 1, &#39;Fresno County&#39;: 2, &#39; Leinster&#39;: 1, &#39; Αποκεντρωμένη Διοίκηση Θεσσαλίας - Στερεάς Ελλάδος&#39;: 6, &#39; Saint Michael&#39;: 2, &#39; Oklahoma&#39;: 2, &#39; Northeastern Ontario&#39;: 2, &#39; County Roscommon&#39;: 3, &#39; Ohio&#39;: 7, &#39; Mississippi&#39;: 3, &#39; Mação&#39;: 3, &#39; Missouri&#39;: 2, &#39; Alba / Scotland&#39;: 2, &#39; Oyo&#39;: 2, &#39; Indiana&#39;: 1, &#39; Auvergne-Rhône-Alpes&#39;: 1, &#39; Berlin&#39;: 3, &#39;Yavapai County&#39;: 1, &#39; West Virginia&#39;: 2, &#39; Park County&#39;: 1, &#39; Pohjois-Suomen aluehallintovirasto&#39;: 2, &#39; Stockholms län&#39;: 2, &#39; Manner-Suomi&#39;: 2, &#39; القاهرة&#39;: 1, &#39; Umbria&#39;: 1, &#39;Fremont County&#39;: 1, &#39; Ciudad Autónoma de Buenos Aires&#39;: 4, &#39; Louisiana&#39;: 2, &#39; Grong&#39;: 1, &#39;Cercle de Goundam&#39;: 1, &#39; Virginia&#39;: 1, &#39; South Carolina&#39;: 2, &#39; West Midlands&#39;: 1, &#39; Nordrhein-Westfalen&#39;: 1, &#39; Västra Götalands län&#39;: 1} . KeyboardInterrupt Traceback (most recent call last) /tmp/ipykernel_166/2979425541.py in &lt;module&gt; 12 dFreq[splitLocation[stateCountryInd]] = dFreq[splitLocation[stateCountryInd]] + 1 if splitLocation[stateCountryInd] in dFreq else 1 13 return dFreq &gt; 14 print(getStateCountryName()) 15 #{&#39; District of Columbia&#39;: 1, &#39; Illinois&#39;: 12, &#39; British Columbia&#39;: 4, &#39; Michigan&#39;: 8, &#39; England&#39;: 48, &#39; North Carolina&#39;: 4, &#39; Ontario&#39;: 7, &#39; Surrey County&#39;: 1, &#39; Tennessee&#39;: 8, &#39; New York&#39;: 43, &#39; California&#39;: 72, &#39; France métropolitaine&#39;: 5, &#39; Massachusetts&#39;: 5, &#39; Colorado&#39;: 2, &#39; Alabama&#39;: 7, &#39; Arkansas&#39;: 1, &#39; Skåne län&#39;: 3, &#39; Minnesota&#39;: 3, &#39; Puerto Rico&#39;: 2, &#39; Georgia&#39;: 7, &#39;Montgomery County&#39;: 6, &#39; Pennsylvania&#39;: 4, &#39; Victoria&#39;: 3, &#39; Washington&#39;: 6, &#39; Nova Scotia&#39;: 2, &#39; New Jersey&#39;: 8, &#39; Connecticut&#39;: 4, &#39; Florida&#39;: 8, &#39; Woodlands County&#39;: 1, &#39; Iowa&#39;: 2, &#39; Bahia&#39;: 1, &#39; Sundsvalls kommun&#39;: 4, &#39; Texas&#39;: 12, &#39; Wisconsin&#39;: 1, &#39;Fresno County&#39;: 2, &#39; Leinster&#39;: 1, &#39; Αποκεντρωμένη Διοίκηση Θεσσαλίας - Στερεάς Ελλάδος&#39;: 6, &#39; Saint Michael&#39;: 2, &#39; Oklahoma&#39;: 2, &#39; Northeastern Ontario&#39;: 2, &#39; County Roscommon&#39;: 3, &#39; Ohio&#39;: 7, &#39; Mississippi&#39;: 3, &#39; Mação&#39;: 3, &#39; Missouri&#39;: 2, &#39; Alba / Scotland&#39;: 2, &#39; Oyo&#39;: 2, &#39; Indiana&#39;: 1, &#39; Auvergne-Rhône-Alpes&#39;: 1, &#39; Berlin&#39;: 3, &#39;Yavapai County&#39;: 1, &#39; West Virginia&#39;: 2, &#39; Park County&#39;: 1, &#39; Pohjois-Suomen aluehallintovirasto&#39;: 2, &#39; Stockholms län&#39;: 2, &#39; Manner-Suomi&#39;: 2, &#39; القاهرة&#39;: 1, &#39; Umbria&#39;: 1, &#39;Fremont County&#39;: 1, &#39; Ciudad Autónoma de Buenos Aires&#39;: 4, &#39; Louisiana&#39;: 2, &#39; Grong&#39;: 1, &#39;Cercle de Goundam&#39;: 1, &#39; Virginia&#39;: 1, &#39; South Carolina&#39;: 2, &#39; West Midlands&#39;: 1, &#39; Nordrhein-Westfalen&#39;: 1, &#39; Västra Götalands län&#39;: 1} /tmp/ipykernel_166/2979425541.py in getStateCountryName() 6 dFreq={} 7 for k,v in top10PercentSong.iterrows(): -&gt; 8 location = getLocationFromCoordinates(v[&#39;artist.latitude&#39;],v[&#39;artist.longitude&#39;]) 9 if location != None: 10 splitLocation = location[0].split(&#39;,&#39;) /tmp/ipykernel_166/2979425541.py in getLocationFromCoordinates(lat, long) 1 def getLocationFromCoordinates(lat,long): #takes in lat and long as a float =&gt; converts to string -&gt; 2 location = geolocator.reverse(str(lat) + &#39;,&#39; + str(long)) 3 return location 4 5 def getStateCountryName(): /opt/conda/lib/python3.9/site-packages/geopy/geocoders/nominatim.py in reverse(self, query, exactly_one, timeout, language, addressdetails, zoom) 360 logger.debug(&#34;%s.reverse: %s&#34;, self.__class__.__name__, url) 361 callback = partial(self._parse_json, exactly_one=exactly_one) --&gt; 362 return self._call_geocoder(url, callback, timeout=timeout) 363 364 def _parse_code(self, place): /opt/conda/lib/python3.9/site-packages/geopy/geocoders/base.py in _call_geocoder(self, url, callback, timeout, is_json, headers) 366 try: 367 if is_json: --&gt; 368 result = self.adapter.get_json(url, timeout=timeout, headers=req_headers) 369 else: 370 result = self.adapter.get_text(url, timeout=timeout, headers=req_headers) /opt/conda/lib/python3.9/site-packages/geopy/adapters.py in get_json(self, url, timeout, headers) 436 437 def get_json(self, url, *, timeout, headers): --&gt; 438 resp = self._request(url, timeout=timeout, headers=headers) 439 try: 440 return resp.json() /opt/conda/lib/python3.9/site-packages/geopy/adapters.py in _request(self, url, timeout, headers) 446 def _request(self, url, *, timeout, headers): 447 try: --&gt; 448 resp = self.session.get(url, timeout=timeout, headers=headers) 449 except Exception as error: 450 message = str(error) /opt/conda/lib/python3.9/site-packages/requests/sessions.py in get(self, url, **kwargs) 553 554 kwargs.setdefault(&#39;allow_redirects&#39;, True) --&gt; 555 return self.request(&#39;GET&#39;, url, **kwargs) 556 557 def options(self, url, **kwargs): /opt/conda/lib/python3.9/site-packages/requests/sessions.py in request(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json) 540 } 541 send_kwargs.update(settings) --&gt; 542 resp = self.send(prep, **send_kwargs) 543 544 return resp /opt/conda/lib/python3.9/site-packages/requests/sessions.py in send(self, request, **kwargs) 653 654 # Send the request --&gt; 655 r = adapter.send(request, **kwargs) 656 657 # Total elapsed time of the request (approximately) /opt/conda/lib/python3.9/site-packages/requests/adapters.py in send(self, request, stream, timeout, verify, cert, proxies) 437 try: 438 if not chunked: --&gt; 439 resp = conn.urlopen( 440 method=request.method, 441 url=url, /opt/conda/lib/python3.9/site-packages/urllib3/connectionpool.py in urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw) 697 698 # Make the request on the httplib connection object. --&gt; 699 httplib_response = self._make_request( 700 conn, 701 method, /opt/conda/lib/python3.9/site-packages/urllib3/connectionpool.py in _make_request(self, conn, method, url, timeout, chunked, **httplib_request_kw) 443 # Python 3 (including for exceptions like SystemExit). 444 # Otherwise it looks like a bug in the code. --&gt; 445 six.raise_from(e, None) 446 except (SocketTimeout, BaseSSLError, SocketError) as e: 447 self._raise_timeout(err=e, url=url, timeout_value=read_timeout) /opt/conda/lib/python3.9/site-packages/urllib3/packages/six.py in raise_from(value, from_value) /opt/conda/lib/python3.9/site-packages/urllib3/connectionpool.py in _make_request(self, conn, method, url, timeout, chunked, **httplib_request_kw) 438 # Python 3 439 try: --&gt; 440 httplib_response = conn.getresponse() 441 except BaseException as e: 442 # Remove the TypeError from the exception chain in /opt/conda/lib/python3.9/http/client.py in getresponse(self) 1347 try: 1348 try: -&gt; 1349 response.begin() 1350 except ConnectionError: 1351 self.close() /opt/conda/lib/python3.9/http/client.py in begin(self) 314 # read until we get a non-100 response 315 while True: --&gt; 316 version, status, reason = self._read_status() 317 if status != CONTINUE: 318 break /opt/conda/lib/python3.9/http/client.py in _read_status(self) 275 276 def _read_status(self): --&gt; 277 line = str(self.fp.readline(_MAXLINE + 1), &#34;iso-8859-1&#34;) 278 if len(line) &gt; _MAXLINE: 279 raise LineTooLong(&#34;status line&#34;) /opt/conda/lib/python3.9/socket.py in readinto(self, b) 702 while True: 703 try: --&gt; 704 return self._sock.recv_into(b) 705 except timeout: 706 self._timeout_occurred = True /opt/conda/lib/python3.9/ssl.py in recv_into(self, buffer, nbytes, flags) 1239 &#34;non-zero flags not allowed in calls to recv_into() on %s&#34; % 1240 self.__class__) -&gt; 1241 return self.read(nbytes, buffer) 1242 else: 1243 return super().recv_into(buffer, nbytes, flags) /opt/conda/lib/python3.9/ssl.py in read(self, len, buffer) 1097 try: 1098 if buffer is not None: -&gt; 1099 return self._sslobj.read(len, buffer) 1100 else: 1101 return self._sslobj.read(len) KeyboardInterrupt: .",
            "url": "https://alex-lansing.github.io/MusicFinalProject/fastpages/jupyter/2022/03/10/.html",
            "relUrl": "/fastpages/jupyter/2022/03/10/.html",
            "date": " • Mar 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://alex-lansing.github.io/MusicFinalProject/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://alex-lansing.github.io/MusicFinalProject/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://alex-lansing.github.io/MusicFinalProject/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://alex-lansing.github.io/MusicFinalProject/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}