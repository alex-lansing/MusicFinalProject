{
  
    
        "post0": {
            "title": "Music Popularity Analysis",
            "content": "Introduction . Welcome to our project on music popularity! Music is something that we both grew up with and are very passionate about so we thought it would be interesting to explore the characteristics of popular music and hopefully derive some meaningful conclusions about what makes people so passionate about music and what has made the music industry as big as it is today. This is what guided our initial research question: What characteristics of a song (ex: a song&#39;s time signature, tempo, mode) make it so appealing to people? The basis of how we ranked songs was based on the song&#39;s &#39;hotttness&#39; rating that was a float value from -1 to 1. However, upon some statistcal analysis to show correlation between different characteristics and popularity rating, we didn&#39;t find anything that convinced us that a significant correlation existed. Out of the song characteristics in our dataset, song duration showed the most telling correlation, where a slight relationship was found between song duration and song/artist popularity. Our exploration of this characteristic is displayed in our methods. From here we knew we needed to expand our investigation past song characteristic data. . Upon furthering our analysis, we noticed that within the music CORGIS dataset were entries for the latitude and longitude representing the home of the artist. This inspired us to shift our research question to the scope of cultural representation within the music industry. Are there certain regions around the world that dominate the production of popular music? We are strong believers that music embodies an indvidual&#39;s culture and roots and We can see many examples of how an artist&#39;s cultural roots and upbringing influence the music that they create. Therefore, we were curious to see if certain areas around the world are not being represented within the industry and with it, their culture. This train of thought led us to our modified research question: Are certain regions around the world dominating the production of popular music and more so are cultures around the world being equally represented within the music indstury? . Methods &amp; Results . musicDF=pd.read_csv(&#39;music.csv&#39;) . We began our investigation of the dataset by taking a look at the data provided. Our initial goal was to find correlations between the dataset columns, so we explored the entire dataset’s shape, the first 5 rows, and the last 5 rows to see the information provided. . print(&quot;Dimensions of the dataframe&quot;) musicDF.shape . Dimensions of the dataframe . (10000, 35) . print(&quot;First 5 rows: &quot;) musicDF.head() . First 5 rows: . artist.familiarity artist.hotttnesss artist.id artist.latitude artist.location artist.longitude artist.name artist.similar artist.terms artist.terms_freq ... song.mode song.mode_confidence song.start_of_fade_out song.tatums_confidence song.tatums_start song.tempo song.time_signature song.time_signature_confidence song.title song.year . 0 0.581794 | 0.401998 | ARD7TVE1187B99BFB1 | 0.00000 | 0 | 0.00000 | Casual | 0.0 | hip hop | 1.000000 | ... | 0 | 0.636 | 218.932 | 0.779 | 0.28519 | 92.198 | 4.0 | 0.778 | 0 | 0 | . 1 0.630630 | 0.417500 | ARMJAGH1187FB546F3 | 35.14968 | 0 | -90.04892 | The Box Tops | 0.0 | blue-eyed soul | 1.000000 | ... | 0 | 0.430 | 137.915 | 0.969 | 0.20627 | 121.274 | 4.0 | 0.384 | 0 | 1969 | . 2 0.487357 | 0.343428 | ARKRRTF1187B9984DA | 0.00000 | 0 | 0.00000 | Sonora Santanera | 0.0 | salsa | 1.000000 | ... | 1 | 0.565 | 172.304 | 0.482 | 0.42132 | 100.070 | 1.0 | 0.000 | 0 | 0 | . 3 0.630382 | 0.454231 | AR7G5I41187FB4CE6C | 0.00000 | 0 | 0.00000 | Adam Ant | 0.0 | pop rock | 0.988584 | ... | 1 | 0.749 | 217.124 | 0.601 | 0.56254 | 119.293 | 4.0 | 0.000 | 0 | 1982 | . 4 0.651046 | 0.401724 | ARXR32B1187FB57099 | 0.00000 | 0 | 0.00000 | Gob | 0.0 | pop punk | 0.887288 | ... | 1 | 0.371 | 198.699 | 1.000 | 0.13576 | 129.738 | 4.0 | 0.562 | 0 | 2007 | . 5 rows × 35 columns . print(&quot;Last 5 rows: &quot;) musicDF.tail() . Last 5 rows: . artist.familiarity artist.hotttnesss artist.id artist.latitude artist.location artist.longitude artist.name artist.similar artist.terms artist.terms_freq ... song.mode song.mode_confidence song.start_of_fade_out song.tatums_confidence song.tatums_start song.tempo song.time_signature song.time_signature_confidence song.title song.year . 9995 0.722571 | 0.499826 | AR4C6V01187FB3BAF4 | 39.55792 | 0 | -7.84481 | Moonspell | 0.0 | sympho black metal | 0.999765 | ... | 1 | 0.540 | 386.194 | 0.224 | 0.22262 | 140.185 | 4.0 | 0.099 | 0 | 1998 | . 9996 0.511663 | 0.409779 | AR9JLBU1187B9AAEC4 | -33.96243 | 0 | 25.62326 | Danny Williams | 0.0 | ballad | 0.915417 | ... | 1 | 0.398 | 163.463 | 0.604 | 0.07692 | 77.072 | 3.0 | 0.597 | 0 | 1998 | . 9997 0.433508 | 0.289903 | ARS1DCR1187B9A4A56 | 0.00000 | 0 | 0.00000 | Winston Reedy | 0.0 | lovers rock | 0.960115 | ... | 1 | 0.565 | 186.015 | 1.000 | 0.27924 | 118.123 | 4.0 | 0.205 | 0 | 0 | . 9998 0.334457 | 0.216829 | ARAGMIV11F4C843F78 | 0.00000 | 0 | 0.00000 | Myrick &quot;Freeze&quot; Guillory | 0.0 | zydeco | 1.000000 | ... | 1 | 0.503 | 300.826 | 0.421 | 0.28192 | 137.663 | 4.0 | 0.000 | 0 | 0 | . 9999 0.609182 | 0.509243 | ARYXOV81187B99831D | 0.00000 | 0 | 0.00000 | Seventh Day Slumber | 0.0 | christian rock | 0.926220 | ... | 0 | 0.406 | 193.167 | 0.710 | 0.20535 | 150.575 | 4.0 | 0.317 | 0 | 2005 | . 5 rows × 35 columns . print(&quot;Column names&quot;) musicDF.columns . Column names . Index([&#39;artist.familiarity&#39;, &#39;artist.hotttnesss&#39;, &#39;artist.id&#39;, &#39;artist.latitude&#39;, &#39;artist.location&#39;, &#39;artist.longitude&#39;, &#39;artist.name&#39;, &#39;artist.similar&#39;, &#39;artist.terms&#39;, &#39;artist.terms_freq&#39;, &#39;release.id&#39;, &#39;release.name&#39;, &#39;song.artist_mbtags&#39;, &#39;song.artist_mbtags_count&#39;, &#39;song.bars_confidence&#39;, &#39;song.bars_start&#39;, &#39;song.beats_confidence&#39;, &#39;song.beats_start&#39;, &#39;song.duration&#39;, &#39;song.end_of_fade_in&#39;, &#39;song.hotttnesss&#39;, &#39;song.id&#39;, &#39;song.key&#39;, &#39;song.key_confidence&#39;, &#39;song.loudness&#39;, &#39;song.mode&#39;, &#39;song.mode_confidence&#39;, &#39;song.start_of_fade_out&#39;, &#39;song.tatums_confidence&#39;, &#39;song.tatums_start&#39;, &#39;song.tempo&#39;, &#39;song.time_signature&#39;, &#39;song.time_signature_confidence&#39;, &#39;song.title&#39;, &#39;song.year&#39;], dtype=&#39;object&#39;) . It appeared that this dataset provides information about both the song artist, and the songs themselves. Interestingly, most columns demonstrated characteristics about songs (i.e. key, time signature, loudness, tempo). From this finding, we decided we investigate potential correlations between song characteristics and the popularity of songs/artists. By finding relationships between these factors, this might shine light on how certain aspects of songs make songs and artists more likable. . musicDF.describe() . artist.familiarity artist.hotttnesss artist.latitude artist.location artist.longitude artist.similar artist.terms_freq release.id release.name song.artist_mbtags ... song.mode song.mode_confidence song.start_of_fade_out song.tatums_confidence song.tatums_start song.tempo song.time_signature song.time_signature_confidence song.title song.year . count 10000.000000 | 10000.000000 | 10000.000000 | 10000.000 | 10000.000000 | 10000.0 | 1.000000e+04 | 10000.000000 | 10000.000000 | 10000.000000 | ... | 10000.000000 | 10000.000000 | 10000.000000 | 10000.000000 | 10000.000000 | 10000.000000 | 10000.000000 | 10000.000000 | 10000.000000 | 10000.000000 | . mean 0.565230 | 0.385552 | 13.904283 | 0.078 | -23.923863 | 0.0 | 2.248903e+02 | 371024.058400 | 23.096000 | 0.000033 | ... | 0.691000 | 0.477765 | 229.883436 | 0.507875 | 0.299886 | 122.900913 | 3.564443 | 0.599785 | 10.011400 | 934.704600 | . std 0.160528 | 0.143647 | 20.356379 | 7.800 | 43.723359 | 0.0 | 2.239216e+04 | 236777.828209 | 1322.901526 | 0.003330 | ... | 0.462104 | 0.191269 | 112.024303 | 0.332357 | 0.510925 | 35.204746 | 1.266620 | 8.991567 | 945.486852 | 996.650657 | . min 0.000000 | 0.000000 | -41.280540 | 0.000 | -162.436500 | 0.0 | 0.000000e+00 | 0.000000 | 0.000000 | 0.000000 | ... | 0.000000 | 0.000000 | -21.394000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 25% 0.467570 | 0.325266 | 0.000000 | 0.000 | -73.948880 | 0.0 | 9.476125e-01 | 172858.000000 | 0.000000 | 0.000000 | ... | 0.000000 | 0.360000 | 168.855750 | 0.237000 | 0.110692 | 96.959500 | 3.000000 | 0.097750 | 0.000000 | 0.000000 | . 50% 0.563584 | 0.380742 | 0.000000 | 0.000 | 0.000000 | 0.0 | 9.999728e-01 | 333103.000000 | 0.000000 | 0.000000 | ... | 1.000000 | 0.487000 | 213.864500 | 0.500000 | 0.191520 | 120.156500 | 4.000000 | 0.551000 | 0.000000 | 0.000000 | . 75% 0.668020 | 0.453858 | 34.419250 | 0.000 | 0.000000 | 0.0 | 1.000000e+00 | 573532.500000 | 0.000000 | 0.000000 | ... | 1.000000 | 0.606000 | 266.274750 | 0.774250 | 0.294743 | 144.006750 | 4.000000 | 0.864000 | 0.000000 | 2000.000000 | . max 1.000000 | 1.082503 | 69.651020 | 780.000 | 174.767140 | 0.0 | 2.239217e+06 | 823599.000000 | 85555.000000 | 0.333000 | ... | 1.000000 | 1.000000 | 1813.426000 | 9.227560 | 12.245830 | 262.828000 | 7.000000 | 898.891000 | 94496.000000 | 2010.000000 | . 8 rows × 31 columns . Exploring the statistics from the columns of this dataset allows us to get a better idea of the range of each column’s data, and further demonstrates possible outliers in the set. Standard deviation tells us about the spread of data provided. As seen in the description above, the standard deviation varies quite significantly across the columns, some measuring 945 while others measuring 1.2. We decided to start creating visualizations to explore this spread of data further, and find potential correlations. . musicDF.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 10000 entries, 0 to 9999 Data columns (total 35 columns): # Column Non-Null Count Dtype -- -- 0 artist.familiarity 10000 non-null float64 1 artist.hotttnesss 10000 non-null float64 2 artist.id 10000 non-null object 3 artist.latitude 10000 non-null float64 4 artist.location 10000 non-null int64 5 artist.longitude 10000 non-null float64 6 artist.name 10000 non-null object 7 artist.similar 10000 non-null float64 8 artist.terms 9995 non-null object 9 artist.terms_freq 10000 non-null float64 10 release.id 10000 non-null int64 11 release.name 10000 non-null int64 12 song.artist_mbtags 10000 non-null float64 13 song.artist_mbtags_count 10000 non-null float64 14 song.bars_confidence 10000 non-null float64 15 song.bars_start 10000 non-null float64 16 song.beats_confidence 10000 non-null float64 17 song.beats_start 10000 non-null float64 18 song.duration 10000 non-null float64 19 song.end_of_fade_in 10000 non-null float64 20 song.hotttnesss 10000 non-null float64 21 song.id 10000 non-null object 22 song.key 10000 non-null float64 23 song.key_confidence 10000 non-null float64 24 song.loudness 10000 non-null float64 25 song.mode 10000 non-null int64 26 song.mode_confidence 10000 non-null float64 27 song.start_of_fade_out 10000 non-null float64 28 song.tatums_confidence 10000 non-null float64 29 song.tatums_start 10000 non-null float64 30 song.tempo 10000 non-null float64 31 song.time_signature 10000 non-null float64 32 song.time_signature_confidence 10000 non-null float64 33 song.title 10000 non-null int64 34 song.year 10000 non-null int64 dtypes: float64(25), int64(6), object(4) memory usage: 2.7+ MB . musicDF.plot(kind=&#39;scatter&#39;,x=&#39;song.loudness&#39;,y=&#39;song.hotttnesss&#39;, title = &#39;song hottnesss vs. song loudness&#39;); . (Figure 1) This scatter has a very undtraditional shape but we think it is important to notice that there seems to be some slight hinting towards higher values of song.loudness associated with popularity. As you can see there are songs that have the same loudness as others but are not nearly as popular so loudness isn&#39;t the only characteristic we can base our analysis off of but for the most part, the more popular songs tend to have a loudness rating from [-10,0] . musicDF[&#39;song.hotttnesss&#39;].plot(kind=&#39;box&#39;,title=&#39;Box Plot of Song hotttnesss&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Box Plot of Song hotttnesss&#39;}&gt; . (Figure 2) In this box plot, it appears that the median measurement of song popularity lies at 0, and the minimum lies at the first quartile, -1. The third quartile is seen at about 0.35, and the maximum is 1. It seems as though the first quartile has a larger range than the third quartile. Outliers are expected to be seen in the first quartile range and also at the maximum. . X = musicDF[[&#39;artist.hotttnesss&#39;]] y = musicDF[&#39;song.tempo&#39;] reg = LinearRegression().fit(X, y) ytrain = reg.intercept_ + reg.coef_ * X plt.plot(X,y,&#39;ro&#39;,X,ytrain,&#39;b-&#39;) plt.title(&quot;Linear Regression of song tempo in comparison to artist hotttness rating&quot;) . Text(0.5, 1.0, &#39;Linear Regression of song tempo in comparison to artist hotttness rating&#39;) . (Figure 3) We ran a linear regression comparing the correlation between artist hotttnesss and the tempo of a song. Depicted below we see that the fitting line almost has a slope of 0 and we can see that the surrounding points don&#39;t really trend to have y=x or y=-x shape making it difficult to make the conclusion that a songs tempo influences the artist hotttness rating that much. Almost resembling a constant y=C shape makes us think that we have to do some sort of analysis with a combination of different song characteristics to find a more convincing correlation. . As learned in class, we made a linear regression fit using the LinearRegression library from ‘sklearn.linear_model’ and the matplotlib.pyplot library. Following a similar method as the assignment, we first created a LinearRegression object using the constructor with the fit being centered around the artist.hotness rating as well as song tempo. Then we made the train variable fit using the regression intercept and regression coefficient. Finally, we plotted the regression using matplotlib along with the train line. Notice that there is not much to suggest a positive or negative correlation. The trend of the points and the line is relatively flat suggesting a neutral correlation. This is just one of the methods that we used to analyze correlation. . tempoDF = musicDF.sort_values(by=&#39;song.tempo&#39;, ascending=False).reset_index() barData = tempoDF.loc[0:50,[&#39;song.tempo&#39;,&#39;artist.name&#39;]] barData.plot(kind=&#39;bar&#39;, x=&#39;artist.name&#39;, y=&#39;song.tempo&#39;, figsize=(12,5), ylabel=&quot;song tempo&quot;, title=&quot;song tempo vs. arist name&quot;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;song tempo vs. arist name&#39;}, xlabel=&#39;artist.name&#39;, ylabel=&#39;song tempo&#39;&gt; . (Figure 4) We first sorted the songs by tempo (a little over 250 seems to be the fastest song that this dataset has). Then we made a bar plot showing the artist&#39;s name assoicated with the fastest song. This information should be used in combination with the rest of the data as we have artists with the fastest songs and we want to see if maybe there is some correlation between the speed of a song and the overall popularity ranking. For additional analysis we will run tests on the artists themselves to see if they are popular. . musicDF.plot(kind=&#39;scatter&#39;, x=&#39;song.hotttnesss&#39;, y=&#39;song.duration&#39;, color=&#39;skyblue&#39;, title = &#39;song duration vs song hotttnesss&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;song duration vs song hotttnesss&#39;}, xlabel=&#39;song.hotttnesss&#39;, ylabel=&#39;song.duration&#39;&gt; . (Figure 5) Taking a look now at song duration, we investigated if the length of the songs themselves would affect song and artist popularity. In this scatter plot, we found that there seemed to be several outlying datapoints in the set, so further cleaning was needed. . musicDF[&#39;song.hotttnesss&#39;] music_df_song_h= musicDF[musicDF[&#39;song.hotttnesss&#39;] &gt; 0.0] . music_df_song_h.plot(kind=&#39;scatter&#39;, x=&#39;song.hotttnesss&#39;, y=&#39;song.duration&#39;, color=&#39;deepskyblue&#39;, title = &#39;song duration vs song hotttnesss&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;song duration vs song hotttnesss&#39;}, xlabel=&#39;song.hotttnesss&#39;, ylabel=&#39;song.duration&#39;&gt; . (Figure 6) We extracted the song hotness measurements that ranged from 0-1. In this scatter plot, the rightmost points demonstrated the most popular songs in the dataset. It appears that as song hotness increases, the song duration begins to narrow towards a more specific range of length. The “hottest” songs seem to fall between 150 and 300 seconds. This result made sense to us as music listeners, because most of the songs we listen to fall between 3-5 minutes. The narrow range of duration of popular songs is an interesting find; perhaps this is because listeners only have so much time until they become bored of the song (hence the longer duration of songs shown leftmost on the plot). . musicDF[&#39;artist.hotttnesss&#39;] . 0 0.401998 1 0.417500 2 0.343428 3 0.454231 4 0.401724 ... 9995 0.499826 9996 0.409779 9997 0.289903 9998 0.216829 9999 0.509243 Name: artist.hotttnesss, Length: 10000, dtype: float64 . music_df_song_h.plot(kind=&#39;scatter&#39;, x=&#39;artist.hotttnesss&#39;, y=&#39;song.duration&#39;, color=&#39;teal&#39;, title = &#39;song duration vs. artist hotttnesss&#39;) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;song duration vs. artist hotttnesss&#39;}, xlabel=&#39;artist.hotttnesss&#39;, ylabel=&#39;song.duration&#39;&gt; . (Figure 7) After finding these results about song duration and song hotness, we wanted to take a further look at how song duration might affect artist hotness. Taking a look at the artist hotness data, it seemed all data was provided between 0 and 1.2. We then created a scatter plot to visualize this spread and possible correlations. The correlation between song duration and artist hotness was not as evident as the slight correlation between song duration and song hotness. It appeared that most artists in the middle range of hotness had songs with lengths ranging between 1 and 550 mostly, then some outliers around 1000 and 1700 seconds. The most popular artists towards the right of the plot seem they’ve created songs around the 150-300 second range, which reflects the result we found earlier about song duration and song hotness. This seems to be an interesting result, but it appears there is too weak of a correlation here to draw truly significant conclusions. . def filterLatLong(d): latLongDF = d[d[&#39;artist.latitude&#39;] != 0.0] latLongDF = latLongDF[latLongDF[&#39;artist.longitude&#39;] != 0.0] return latLongDF.reset_index() music_df = filterLatLong(musicDF) song_df = music_df.sort_values(&#39;song.hotttnesss&#39;, axis=0, ascending=False, inplace=False).reset_index(drop=True) artist_df = music_df.sort_values(&#39;artist.hotttnesss&#39;, axis=0, ascending=False, inplace=False).reset_index(drop=True) # top 10% top10PercentSong = song_df.head(int(len(song_df) * .1)) restSong = song_df.tail(int(len(song_df)*.5)) top10PercentArtist = artist_df.head(int(len(song_df) * .1)) restArtist = artist_df.tail(int(len(song_df)*.5)) def createMap(df): geometry = [Point(xy) for xy in zip(df[&#39;artist.longitude&#39;], df[&#39;artist.latitude&#39;])] gdf = GeoDataFrame(df, geometry=geometry) world = gpd.read_file(gpd.datasets.get_path(&#39;naturalearth_lowres&#39;)) gdf.plot(ax=world.plot(figsize=(10, 6)), marker=&#39;o&#39;, color=&#39;red&#39;, markersize=5) . . print(&quot;Top 10 Percent of Songs&quot;) createMap(top10PercentSong) . Top 10 Percent of Songs . (Figure 8) Top 10 Percent of Songs on map . print(&quot;Bottom 50 Percent of Songs&quot;) createMap(restSong) . (Figure 9) Bottom 50 Percent of Songs . print(&quot;Top 10 Percent of Artists&quot;) createMap(top10PercentArtist) . Top 10 Percent of Artists . (Figure 10) Top 10 Percent of Artists . print(&quot;Bottom 50 Percent of Artists&quot;) createMap(restArtist) . Bottom 50 Percent of Artists . (Figure 11) Bottom 50 Percent of Artists . We utilized the shapely.geometry, geopandas, and GeoDataFrame libraries to plot our points on a map. Within this analysis, we separated the maps into two categories: rankings of a song&#39;s popularity as well as the sorted ranking of the artist’s popularity. The importance here is we can see if there are specific trends between the most and least popular music, utilizing the head() and tail() methods built into pandas dataframe, and the sort_values() method. The functionality to create the maps were exported into helper functions for a cleaner visualization generation. . geolocator = Nominatim(user_agent=&quot;geoapiExercises&quot;) . def getLocationFromCoordinates(lat,long): #takes in lat and long as a float =&gt; converts to string location = geolocator.reverse(str(lat) + &#39;,&#39; + str(long)) return location def getStateCountryName(): dFreq={} for k,v in top10PercentSong.iterrows(): location = getLocationFromCoordinates(v[&#39;artist.latitude&#39;],v[&#39;artist.longitude&#39;]) if location != None: splitLocation = location[0].split(&#39;,&#39;) stateCountryInd = len(splitLocation)-3 dFreq[splitLocation[stateCountryInd]] = dFreq[splitLocation[stateCountryInd]] + 1 if splitLocation[stateCountryInd] in dFreq else 1 return dFreq print(getStateCountryName()) . {&#39; District of Columbia&#39;: 1, &#39; Illinois&#39;: 12, &#39; British Columbia&#39;: 4, &#39; Michigan&#39;: 8, &#39; England&#39;: 48, &#39; North Carolina&#39;: 4, &#39; Ontario&#39;: 7, &#39; Surrey County&#39;: 1, &#39; Tennessee&#39;: 8, &#39; New York&#39;: 43, &#39; California&#39;: 72, &#39; France métropolitaine&#39;: 5, &#39; Massachusetts&#39;: 5, &#39; Colorado&#39;: 2, &#39; Alabama&#39;: 7, &#39; Arkansas&#39;: 1, &#39; Skåne län&#39;: 3, &#39; Minnesota&#39;: 3, &#39; Puerto Rico&#39;: 2, &#39; Georgia&#39;: 7, &#39;Montgomery County&#39;: 6, &#39; Pennsylvania&#39;: 4, &#39; Victoria&#39;: 3, &#39; Washington&#39;: 6, &#39; Nova Scotia&#39;: 2, &#39; New Jersey&#39;: 8, &#39; Connecticut&#39;: 4, &#39; Florida&#39;: 8, &#39; Woodlands County&#39;: 1, &#39; Iowa&#39;: 2, &#39; Bahia&#39;: 1, &#39; Sundsvalls kommun&#39;: 4, &#39; Texas&#39;: 12, &#39; Wisconsin&#39;: 1, &#39;Fresno County&#39;: 2, &#39; Leinster&#39;: 1, &#39; Αποκεντρωμένη Διοίκηση Θεσσαλίας - Στερεάς Ελλάδος&#39;: 6, &#39; Saint Michael&#39;: 2, &#39; Oklahoma&#39;: 2, &#39; Northeastern Ontario&#39;: 2, &#39; County Roscommon&#39;: 3, &#39; Ohio&#39;: 7, &#39; Mississippi&#39;: 3, &#39; Mação&#39;: 3, &#39; Missouri&#39;: 2, &#39; Alba / Scotland&#39;: 2, &#39; Oyo&#39;: 2, &#39; Indiana&#39;: 1, &#39; Auvergne-Rhône-Alpes&#39;: 1, &#39; Berlin&#39;: 3, &#39;Yavapai County&#39;: 1, &#39; West Virginia&#39;: 2, &#39; Park County&#39;: 1, &#39; Pohjois-Suomen aluehallintovirasto&#39;: 2, &#39; Stockholms län&#39;: 2, &#39; Manner-Suomi&#39;: 2, &#39; القاهرة&#39;: 1, &#39; Umbria&#39;: 1, &#39;Fremont County&#39;: 1, &#39; Ciudad Autónoma de Buenos Aires&#39;: 4, &#39; Louisiana&#39;: 2, &#39; Grong&#39;: 1, &#39;Cercle de Goundam&#39;: 1, &#39; Virginia&#39;: 1, &#39; South Carolina&#39;: 2, &#39; West Midlands&#39;: 1, &#39; Nordrhein-Westfalen&#39;: 1, &#39; Västra Götalands län&#39;: 1} . Utilizing the geopy.geocoders Nominatim library, we created a helper function that takes in a longitude and latitude and returns a list of the actual location that it corresponds to. Because of the discrepancy between region subdivisions across the world, we chose to expand the scope of location to state or country. For example, countries like England don’t have the same state division that the US has. Compiling all these location occurrences in a dictionary, we were able to see the most frequent occurring places in the top songs dataframe to give us more detail to use in conjunction with the map. The main reason for this was because there are so many points on the map and if someone wanted to do a more detailed analysis on specific regions in say the US, they would be able to do so by examining music production in a specific state or region around the world. . Discussion . We can see a clear difference between the maps that represent the top 10 percent of popular songs and the top 10 percent of artists. First, we will start with the artist’s home location of the top 10 percent of songs. Notice that most of the data points are clustered in the east coast of the United States and the UK, with a couple points existing in parts of Canada, South America, other parts of Europe, Africa, and Australia. However, when we plot the bottom 50% of songs, notice that more points are popping up in these underrepresented regions. More parts of Europe, Africa, and South America are appearing as well as Russian and Japanese artists. . This trend is even more prevalent in maps depicting the top 10 percent of most popular artists. The dominance of English artists looks to be very obvious with all the points in Europe centered around that region. Furthermore, the points in the US are grouped around the east coast with some west coast artists as well as some in the midwest. However, when we graph the bottom 50% of popular artists, points start popping up all over the world from Canada, to South America, to Africa, and even in India. We think this portrays a large discrepancy regarding cultural representation within the music industry. At this current point in time, music is heavily representative of English speaking countries and with it, American and UK culture. Recent estimates of music industry revenue is around 7.1$ billion annually and it doesn’t seem that this trend is going to decrease anytime soon. We think it is fair to conclude from this that music has such a large influence on the modern world and a single popular song can make someone’s name known around the world. . But what exactly is so important about music? We think it is what an artist’s music represents about themselves and the things that they stand for. It is an embodiment of one’s culture and how they view the world. This begs the question: it is a problem that so many cultures are not represented within the music industry and if so, what should be done in order to change that? Taking a look at the top hottest artists from this dataset well reflects the top artists we see advertised on applications like Spotify, Apple Music, and YouTube. If music listeners are constantly advertised songs produced by artists from similar regions and cultural backgrounds, that limits the exploration of less-popular songs from other regions. Could advertising less popular songs bring more diversity into the music world? Or do music listeners truly prefer American and UK music culture? Our investigation raises these questions that encourage further research on this topic. Also, we believe that this brings to light a sense of responsibility that these popular artists have as their music has so much influence. Can and should their music be used as a source of betterment? These ideas are questions that we cannot answer and we hope that our project sparks your own ideas on this matter. Thank you! . Brandon&#39;s Contribution: Linear Regression plot, mappings, helper functions, binder link, written narrative | Alex&#39;s Contribution: Scatter/Box/Line/Bar plots, helper functions, blog, binder link, written narrative .",
            "url": "https://alex-lansing.github.io/MusicFinalProject/fastpages/jupyter/2022/03/11/FinalNotebook.html",
            "relUrl": "/fastpages/jupyter/2022/03/11/FinalNotebook.html",
            "date": " • Mar 11, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://alex-lansing.github.io/MusicFinalProject/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://alex-lansing.github.io/MusicFinalProject/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://alex-lansing.github.io/MusicFinalProject/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}